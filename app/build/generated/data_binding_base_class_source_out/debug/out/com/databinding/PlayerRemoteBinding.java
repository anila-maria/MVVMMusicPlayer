// Generated by view binder compiler. Do not edit!
package com.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.ViewFlipper;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.R;
import com.frolo.waveformseekbar.WaveformSeekBar;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PlayerRemoteBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialCardView btnPauseBtn;

  @NonNull
  public final MaterialCardView btnPlayBtn;

  @NonNull
  public final ConstraintLayout constraintLayout2;

  @NonNull
  public final ConstraintLayout constraintLayout3;

  @NonNull
  public final TextView musicMax;

  @NonNull
  public final TextView musicMin;

  @NonNull
  public final ImageView nextBtn;

  @NonNull
  public final ImageView pauseBtn;

  @NonNull
  public final ImageView playBtn;

  @NonNull
  public final TextView playOneSongLabelTv;

  @NonNull
  public final ConstraintLayout playOrPauseLayout;

  @NonNull
  public final ImageView prevBtn;

  @NonNull
  public final ConstraintLayout repeatAllContainer;

  @NonNull
  public final ImageView repeatBtn;

  @NonNull
  public final ViewFlipper repeatContainer;

  @NonNull
  public final ConstraintLayout repeatNoneContainer;

  @NonNull
  public final ConstraintLayout repeatOneContainer;

  @NonNull
  public final ViewFlipper shuffleContainer;

  @NonNull
  public final ConstraintLayout shuffleRepeatLayout;

  @NonNull
  public final WaveformSeekBar waveformSeekBar;

  private PlayerRemoteBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialCardView btnPauseBtn, @NonNull MaterialCardView btnPlayBtn,
      @NonNull ConstraintLayout constraintLayout2, @NonNull ConstraintLayout constraintLayout3,
      @NonNull TextView musicMax, @NonNull TextView musicMin, @NonNull ImageView nextBtn,
      @NonNull ImageView pauseBtn, @NonNull ImageView playBtn, @NonNull TextView playOneSongLabelTv,
      @NonNull ConstraintLayout playOrPauseLayout, @NonNull ImageView prevBtn,
      @NonNull ConstraintLayout repeatAllContainer, @NonNull ImageView repeatBtn,
      @NonNull ViewFlipper repeatContainer, @NonNull ConstraintLayout repeatNoneContainer,
      @NonNull ConstraintLayout repeatOneContainer, @NonNull ViewFlipper shuffleContainer,
      @NonNull ConstraintLayout shuffleRepeatLayout, @NonNull WaveformSeekBar waveformSeekBar) {
    this.rootView = rootView;
    this.btnPauseBtn = btnPauseBtn;
    this.btnPlayBtn = btnPlayBtn;
    this.constraintLayout2 = constraintLayout2;
    this.constraintLayout3 = constraintLayout3;
    this.musicMax = musicMax;
    this.musicMin = musicMin;
    this.nextBtn = nextBtn;
    this.pauseBtn = pauseBtn;
    this.playBtn = playBtn;
    this.playOneSongLabelTv = playOneSongLabelTv;
    this.playOrPauseLayout = playOrPauseLayout;
    this.prevBtn = prevBtn;
    this.repeatAllContainer = repeatAllContainer;
    this.repeatBtn = repeatBtn;
    this.repeatContainer = repeatContainer;
    this.repeatNoneContainer = repeatNoneContainer;
    this.repeatOneContainer = repeatOneContainer;
    this.shuffleContainer = shuffleContainer;
    this.shuffleRepeatLayout = shuffleRepeatLayout;
    this.waveformSeekBar = waveformSeekBar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PlayerRemoteBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PlayerRemoteBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.player_remote, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PlayerRemoteBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_pause_btn;
      MaterialCardView btnPauseBtn = ViewBindings.findChildViewById(rootView, id);
      if (btnPauseBtn == null) {
        break missingId;
      }

      id = R.id.btn_play_btn;
      MaterialCardView btnPlayBtn = ViewBindings.findChildViewById(rootView, id);
      if (btnPlayBtn == null) {
        break missingId;
      }

      id = R.id.constraintLayout2;
      ConstraintLayout constraintLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (constraintLayout2 == null) {
        break missingId;
      }

      id = R.id.constraintLayout3;
      ConstraintLayout constraintLayout3 = ViewBindings.findChildViewById(rootView, id);
      if (constraintLayout3 == null) {
        break missingId;
      }

      id = R.id.music_max;
      TextView musicMax = ViewBindings.findChildViewById(rootView, id);
      if (musicMax == null) {
        break missingId;
      }

      id = R.id.music_min;
      TextView musicMin = ViewBindings.findChildViewById(rootView, id);
      if (musicMin == null) {
        break missingId;
      }

      id = R.id.next_btn;
      ImageView nextBtn = ViewBindings.findChildViewById(rootView, id);
      if (nextBtn == null) {
        break missingId;
      }

      id = R.id.pause_btn;
      ImageView pauseBtn = ViewBindings.findChildViewById(rootView, id);
      if (pauseBtn == null) {
        break missingId;
      }

      id = R.id.play_btn;
      ImageView playBtn = ViewBindings.findChildViewById(rootView, id);
      if (playBtn == null) {
        break missingId;
      }

      id = R.id.playOneSongLabel_tv;
      TextView playOneSongLabelTv = ViewBindings.findChildViewById(rootView, id);
      if (playOneSongLabelTv == null) {
        break missingId;
      }

      id = R.id.playOrPause_layout;
      ConstraintLayout playOrPauseLayout = ViewBindings.findChildViewById(rootView, id);
      if (playOrPauseLayout == null) {
        break missingId;
      }

      id = R.id.prev_btn;
      ImageView prevBtn = ViewBindings.findChildViewById(rootView, id);
      if (prevBtn == null) {
        break missingId;
      }

      id = R.id.repeat_all_container;
      ConstraintLayout repeatAllContainer = ViewBindings.findChildViewById(rootView, id);
      if (repeatAllContainer == null) {
        break missingId;
      }

      id = R.id.repeat_btn;
      ImageView repeatBtn = ViewBindings.findChildViewById(rootView, id);
      if (repeatBtn == null) {
        break missingId;
      }

      id = R.id.repeatContainer;
      ViewFlipper repeatContainer = ViewBindings.findChildViewById(rootView, id);
      if (repeatContainer == null) {
        break missingId;
      }

      id = R.id.repeat_none_container;
      ConstraintLayout repeatNoneContainer = ViewBindings.findChildViewById(rootView, id);
      if (repeatNoneContainer == null) {
        break missingId;
      }

      id = R.id.repeat_one_container;
      ConstraintLayout repeatOneContainer = ViewBindings.findChildViewById(rootView, id);
      if (repeatOneContainer == null) {
        break missingId;
      }

      id = R.id.shuffle_container;
      ViewFlipper shuffleContainer = ViewBindings.findChildViewById(rootView, id);
      if (shuffleContainer == null) {
        break missingId;
      }

      id = R.id.shuffle_repeat_layout;
      ConstraintLayout shuffleRepeatLayout = ViewBindings.findChildViewById(rootView, id);
      if (shuffleRepeatLayout == null) {
        break missingId;
      }

      id = R.id.waveform_seek_bar;
      WaveformSeekBar waveformSeekBar = ViewBindings.findChildViewById(rootView, id);
      if (waveformSeekBar == null) {
        break missingId;
      }

      return new PlayerRemoteBinding((ConstraintLayout) rootView, btnPauseBtn, btnPlayBtn,
          constraintLayout2, constraintLayout3, musicMax, musicMin, nextBtn, pauseBtn, playBtn,
          playOneSongLabelTv, playOrPauseLayout, prevBtn, repeatAllContainer, repeatBtn,
          repeatContainer, repeatNoneContainer, repeatOneContainer, shuffleContainer,
          shuffleRepeatLayout, waveformSeekBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
